Weasley Clock App Tests

  - Users 
    x Login
      x Can create new user
        x new user form data captures correctly and sent to POST
        x state correctly updates upon successful login
      x User can login
        x known user form data captures correctly and sent to POST
        x state correctly updates upon successful login
    x Friends
      x Can add/remove friend
      x Can view friend's clock

  - Clock
    - ClockFace
      x Displays users locations
    - TopNav
      - Can add/remove location
      - Can update location


Testing Notes:

* Started with Enzyme, discovered it doesn't support hooks well, switched to react-testing-lib
* 3 As of testing
* Custom messages with Jest
* DRY vs Granularity (I repeated for more clarity)
* Granularity vs speed (my project is small so I decided to make them very clear even tho that wouldn't work with a larger project)
* Watch out for the order that you import, react mock outside of beforeEach threw error
* I didn't do TDD but I should have.  Writing tests forced me be confident in the logic of my code in order to figure out what needed to be tested
* Realized I needed an id to test my add/remove friends; initially tried to solve with friend-ele-count, switched to friend-ele-username because more clear and consistent
* (What should you test) When the component is mock-rendered it can do everything the normal component can do but not all of those functions are exposed unless you set them up to be spied upon so I can make the component do something and see what happens after easier than I can check to see what exactly is happening?

Google Docs for text editor




  * Basic Requirements
    - Render 'Clock'
      x Learn what React Native is
        x Learn how to render things in React Native
          x Initialize Environment
    x Try to render circle
    x Create function to locate points on circle
    x Render point on circle
    x Default locations like home/work/gym/etc.
      x Can add custom locations
        x Add field to recieve text Input
          x briefly research Redux
          x create new component for topNav
        x onSubmit updates locations with setLocation
          x create handleSubmit fn
          x properly render submit button and form
          x handleSubmit updates locations
            x pass setLocations to TopNav

    x Can update location
      x Create Input Field to update location
        x research hooks
        x attempt to place all vars in functional component
          x attempt to create state hook
          x create drop down
          x updates location
    x Can remove location
      x create html button
      x create onClick
      x  onClick updates locations

    - Can add text string status to location

    - Can create user profile
      x user profile has userName
        x default userName is Harry
        x title at top of page displays current wizard name
      - User profile has picture and basic info
    
    -Has login/add user page
      x create new page
      x create state in App to conditionally render Login
      x form to enter login information
      x link for new User
        x figure out what newUser did to break the Get request
        x make add New User add correct info
      - link  for forgotten password
    
    - Can add friends
      x Add 'Manage Wizard Order' button
      - Button toggles conditional formatting for friends management
        x create Div to replace with friend management
        x reate handleClick function for manage wizard order
        - create friends management component
          x create Manage locations button to return
          x create handleClick function for manage locations
          x create container for allWiz and yourOrder lists
            x allWiz container renders dummy names
            x yourOrder renders dummy names array
            x update schema to have 'friends' property
            - allWiz renders list of all users
              x create state for allUsers
              - create useEffect to update allUsers when component loads
            - yourOrder renders list of users friends
              x create state for myFriends
              - useEffect to update myFriends when component loads
            - can click on name to add/remove friend

    - Can view friend's clock
    - Can create friend groups
      - Can filter which hands show by friend group
    
    - user information persists over logins
      x choose DB
      x install dependencies
      x create DB schema
      x create DB
      - create server routes
        x create POST request
        x create GET request
      x create path from server to db
      x create paths from front-end to DB
      x front-end recieves data from DB
      x front-end initial render is based on GET request from DB
      - front-end updates DB
        - create post req for updating locations
        - create post route to db